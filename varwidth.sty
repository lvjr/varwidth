%%% Copyright : 2003-2004, 2009 (c) Donald Arseneau <asnd@triumf.ca>
%%% Copyright : 2024 (c) Jianrui Lyu <tolvjr@163.com>
%%% License   : The LaTeX Project Public License 1.3c

\NeedsTeXFormat{LaTeX2e}[2018-04-01]
\providecommand\DeclareRelease[3]{}
\providecommand\DeclareCurrentRelease[2]{}
\DeclareRelease{v2009}{2003-01-01}{varwidth-2009.sty}
\DeclareCurrentRelease{}{2024-01-01}

\ProvidesExplPackage{varwidth}{2024-12-03}{2024A}{Variable-width minipages}

\cs_new_protected:Npn \narrowragged {
  \rightskip \z@ plus .25\hsize
  \@rightskip \rightskip
  \parfillskip \z@ plus .15\hsize
  \sloppy
}

\box_new:N \l__vwid_box

% The varwidth environment is based on minipage, and takes the same
% parameters, but the specified width is only a limit -- a narrower
% natural width may be used.  \varwidth uses \minipage.

\cs_new_protected_nopar:Npn \varwidth {
  \cs_set_eq:NN \@minipagerestore \__vwid_setup
  \minipage
}

% Many things may appear on vertical lists that can't be re-processed,
% so they have to be modified. 

\cs_new_protected_nopar:Npn \__vwid_setup {
  % several things can't appear in vertical mode, so they may get 
  % a \vbox wrapped around them.
  \cs_set_eq:NN \@bsphack \__vwid_bsphack % \label and others
  \cs_set_eq:NN \mark \@gobble % Marks disappear in minipages anyway
  \cs_set_eq:NN \special \__vwid_special % \color and others
  \cs_set_eq:NN \pdfliteral \__vwid_pdfliteral % \color and others
  \cs_set_eq:NN \addtocontents \__vwid_addtocontents % \addcontentsline
  % Shifted boxes (\parshape,\hangindent) will have their shifts
  % indicated in a separate box.
  \cs_set_eq:NN \@hangfrom \__vwid_hangfrom % hanging indents
  \cs_set_eq:NN \list \__vwid_list
  \cs_set_eq:NN \endtrivlist \__vwid_endtrivlist
  \postdisplaypenalty\c__vwid_posteqp_token
  \predisplaypenalty\c__vwid_preeqp_token
  \cs_set_nopar:Npn \@eqnnum {
    \aftergroup \__vwid_afterva \__vwid_saved_@eqnnum
  }
  \global\@vwid@roff\z@  \global\@vwid@loff\z@
  % Begin an inner minipage-like vertical box (in \@tempboxa)
  \cs_set_eq:NN \@minipagerestore \__vwid_saved_@minipagerestore
  \@minipagerestore
  \setbox\@tempboxa\vbox\bgroup\begingroup
  % Flag the top of the list
  \penalty\c__vwid_toppen_token
}

\cs_new_eq:NN \__vwid_saved_@minipagerestore \@minipagerestore

%  At end of varwidth environment.
\cs_new_protected_nopar:Npn \endvarwidth {
   \par\@@par
   \unskip
   % Handle minipage-style notes.
   \ifvoid\@mpfootins\else
     \vskip\skip\@mpfootins
     \normalcolor
     \__vwid_wrap\footnoterule
     \unvbox\@mpfootins
   \fi
   \unskip
   \@minipagefalse
   \endgroup\egroup % got my \@tempboxa
   %{\showoutput\showbox\@tempboxa}%
   % in a discarded box, sift through list measuring max width.
   \begingroup\setbox\z@\vbox\bgroup
%\message{-------------------------------------------------------------}%
%\message{First pass; hsize=\the\hsize...  }%{\tracingall\showlists}%%
     \unvcopy\@tempboxa
     \@tempdima-\maxdimen
     \cs_set_eq:NN \__vwid_resetb \__vwid_measure
     \cs_set_eq:NN \__vwid_append \relax
     \sift@deathcycles\z@
     \__vwid_sift
     \xdef\@vwid@{\the\@tempdima}%
   \egroup\endgroup
   % Done measuring.  Now empty \@tempboxa onto current vertical list
   % which is the contents of a minipage environment
%\message{Got natural width \@vwid@ (compare \the\hsize) }%
   \unvbox\@tempboxa
   % Choose the natural width or the declared width, whichever is smaller.
   \ifdim\@vwid@<\hsize
     \hsize\@vwid@
   \fi
   % Go through the vertical list reboxing and moving everything into
   % \l__vwid_box; then spill \l__vwid_box.  If the natural width is narrower,
   \setbox\l__vwid_box\vbox{}%
   \sift@deathcycles\z@
%\message{----------------------------------------------------------------}%
%\message{Second pass; hsize=\the\hsize...  }%{\tracingall\showlists}%
   \__vwid_sift
%\message{After sifting:}%
%{\showoutput\showbox\l__vwid_box}%
   \unvbox\l__vwid_box
   % end the minipage environment
   \endminipage
}

%
% Here are definitions for sifting through the vertical list, either
% measuring things or reboxing them.  
%
% Penalties used as signals to the vertical-list processor:

\mathchardef \c__vwid_posteqp_token  17321 % Penalty below equations
\mathchardef \c__vwid_preeqp_token   17322 % Penalty above equations
\mathchardef \c__vwid_postnump_token 17323 % Penalty below numbered equations
\mathchardef \c__vwid_toppen_token   17324 % Penalty marking top of vertical list
\mathchardef \c__vwid_offsets_token  17325 % Penalty below special h-offsets box
\mathchardef \c__vwid_postw_token    17326 % Penalty below a \vbox-wrapped object

\newcount\sift@deathcycles

\cs_new_protected_nopar:Npn \__vwid_sift {
  \skip@\lastskip\unskip
  \ifdim\lastskip=\z@\unskip\fi % <---- the first aid here (not just unskip)
  \dimen@\lastkern\unkern
  \count@\lastpenalty\unpenalty
  \setbox\z@\lastbox
%{\showoutput\showbox\z@}%
  \ifvoid\z@ \advance\sift@deathcycles\@ne \else \sift@deathcycles\z@ \fi
  \ifnum\sift@deathcycles>33 
    \cs_set_eq:NN \__vwid_sift \relax
    \PackageWarning{varwidth}{Failed~to~reprocess~entire~contents}%
  \fi
%\message{\the\sift@deathcycles: skip \the\skip@; kern \the\dimen@; penalty \the\count@. }%
%\ifhbox\z@\setbox99\hbox to0pt{\unhcopy\z@}\fi  % = message
  \ifnum\count@=\c__vwid_preeqp_token \@vwid@eqmodefalse\fi
%\ifnum\count@=\c__vwid_preeqp_token \message{End equation mode. }\fi
  \ifnum\count@=\c__vwid_posteqp_token \@vwid@eqmodetrue\fi
%\ifnum\count@=\c__vwid_posteqp_token\message{Begin equation mode. }\fi
%\if@vwid@eqmode {\showoutput\showbox\z@}\fi
  \ifnum\count@=\c__vwid_toppen_token % finished
    \cs_set_eq:NN \__vwid_sift \relax
  \else\ifnum\count@=\c__vwid_offsets_token
    \__vwid_setoffsets
  \else
    \ifnum\count@=\c__vwid_postw_token
    \else
      \__vwid_resetb % reset box \z@ or measure it
    \fi
    \__vwid_append
  \fi\fi
  \__vwid_sift
}

\cs_new_protected_nopar:Npn \__vwid_setoffsets {
 \setbox\z@=\hbox{\unhbox\z@
  \global\@vwid@roff\lastkern\unkern
  \global\@vwid@loff\lastkern\unkern}%
%\message{Set offsets to \the\@vwid@loff,  \the\@vwid@roff. }%
}

% Append contents of box \z@ and glue to \l__vwid_box
\cs_new_protected_nopar:Npn \__vwid_append {
  \setbox\l__vwid_box\vbox{%
    \unvbox\z@
    \ifdim\dimen@=\z@\else \kern\dimen@ \fi
    \vskip\skip@
    \unvbox\l__vwid_box
  }%{\tracingall\showbox\l__vwid_box}%
}

%  reset box \z@ to \hsize, applying shifts, and wrap in vbox
%  Don't worry about numbered equations because we won't get
%  here if there are any.
\cs_new_protected_nopar:Npn \__vwid_resetb {
  \setbox\z@\vbox\bgroup
    \ifvoid\z@
    \else
       \ifvbox\z@
         \box\z@
       \else % \hbox
         \@tempdima\hsize
         \advance\@tempdima-\@vwid@roff
         \advance\@tempdima-\@vwid@loff
         \advance\@tempdima-\p@
%\message{Test if \the\wd\z@ > \the\@tempdima, }%
         \ifdim\wd\z@>\@tempdima % full-width line; rebox it
%\message{An ordinary line or alignment. (\the\wd\z@ > \the\@tempdima) }%
            \hbox to\hsize
              {\kern\@vwid@loff \unhbox\z@ \kern\@vwid@roff}%
         \else % an equation or direct \hbox
           \if@vwid@eqmode % re-center unnumbered equations
%\message{A centered equation hsize=\the\hsize. }%
              \hbox to\hsize
                {\hskip\@vwid@loff\@plus1fil
                 \unhbox\z@ \hskip\@vwid@roff\@plus1fil}%
           \else % plain narrow \hbox; leave it as-is
%\message{Plain narrow box}%
              \box\z@
    \fi\fi\fi\fi
  \egroup
}


% Measure a line (in box \z@) and keep a running tally of the
% widest natural width in \@tempdima

\cs_new_protected_nopar:Npn \__vwid_measure {
  \ifvoid\z@
  \else
    % numbered equations not part of alignments can't be reset,
    % so force retention of full width.
    \ifnum\count@=\c__vwid_postnump_token \ifdim\wd\z@<\linewidth
      \ifdim\@tempdima<\linewidth \@tempdima\linewidth \fi
    \fi\fi
    \ifhbox\z@
      \setbox\z@=\hbox
        {\kern\@vwid@loff \unhbox\z@ \kern\@vwid@roff}%
    \fi
    \ifdim\wd\z@>\@tempdima \@tempdima\wd\z@ \fi
  \fi
}

\newdimen\@vwid@loff
\newdimen\@vwid@roff

\cs_new_eq:NN \__vwid_saved_@bsphack \@bsphack
\cs_new_eq:NN \__vwid_saved_@esphack \@esphack
\cs_new_eq:NN \__vwid_saved_@Esphack \@Esphack

\cs_new_protected_nopar:Npn \__vwid_bsphack {
  \__vwid_saved_@bsphack
  \ifx\__vwid_wrap\@firstofone
    \bgroup
  \else
    \ifvmode
      \setbox\l__vwid_box \vbox\bgroup \vbox\bgroup
      \cs_set_eq:NN \__vwid_wrap \@firstofone
      \cs_set_nopar:Npn \@esphack {
        \__vwid_esphack \__vwid_saved_@esphack
      }
      \cs_set_nopar:Npn \@Esphack {
        \__vwid_esphack \__vwid_saved_@Esphack
      }
    \fi
  \fi
}

\cs_new_protected_nopar:Npn \__vwid_esphack {
  \egroup
  \ifx\__vwid_wrap\@firstofone\else
    \egroup % end outer box
    \unvbox\l__vwid_box % put inner box on list without lineskip
    \penalty\c__vwid_postw_token
  \fi
}

% \vbox Wrapper for misc vlist items
\cs_new_protected:Npn \__vwid_wrap {
  \relax
  \ifvmode\expandafter\__vwid_do_wrap \else \expandafter\@firstofone \fi
}
\cs_new_protected:Npn \__vwid_do_wrap #1 {
  \setbox \l__vwid_box \vbox {
    \vbox {
      \cs_set_eq:NN \__vwid_wrap \@firstofone
      #1
    }
    \penalty \c__vwid_postw_token
  }
  \unvbox \l__vwid_box
}

\cs_new_eq:NN \__vwid_saved_special       \special
\cs_new_eq:NN \__vwid_saved_pdfliteral    \pdfliteral
\cs_new_eq:NN \__vwid_saved_addtocontents \addtocontents
\cs_new_eq:NN \__vwid_saved_list          \list
\cs_new_eq:NN \__vwid_saved_endtrivlist   \endtrivlist
\cs_new_eq:NN \__vwid_saved_@eqnnum       \@eqnnum

\cs_new_protected:Npn \__vwid_special #1 {
  \__vwid_wrap{\__vwid_saved_special{#1}}
}

\cs_new_protected:Npn \__vwid_pdfliteral #1 {
  \__vwid_wrap{\__vwid_saved_pdfliteral{#1}}
}

\cs_new_protected:Npn \__vwid_addtocontents #1 #2 {
  \__vwid_wrap{\__vwid_saved_addtocontents{#1}{#2}}
}

\cs_new_protected:Npn \__vwid_hangfrom #1 {
  \par
  \setbox\@tempboxa\hbox{{#1}}%
  \setbox\l__vwid_box \vbox{\hbox{\kern\z@ \kern\z@
   }\penalty\c__vwid_offsets_token}\unvbox\l__vwid_box
  \cs_set_nopar:Npn \par {
    \relax\ifhmode\unskip\fi
    \vadjust{\hbox{\kern\hangindent\kern\z@}\penalty\c__vwid_offsets_token}
    \@restorepar\par
  }
  \hangindent \wd\@tempboxa\noindent\box\@tempboxa
}

\cs_new_protected_nopar:Npn \__vwid_list {
  \__vwid_setlist\__vwid_saved_list
}

\cs_new_protected_nopar:Npn \__vwid_endtrivlist {
  \__vwid_setlist\__vwid_saved_endtrivlist
}

\cs_new_protected_nopar:Npn \__vwid_setlist {
  \relax\ifhmode \unskip\expandafter\vadjust\fi
  {\setbox\l__vwid_box \vbox{\hbox{%
    \advance\hsize-\linewidth \advance\hsize-\@totalleftmargin
    \kern\@totalleftmargin  \kern\hsize}%
    \penalty\c__vwid_offsets_token}%
   \unvbox\l__vwid_box}
}

\newif\if@vwid@eqmode

\cs_new_protected_nopar:Npn \__vwid_afterva {
  \vadjust{\penalty\c__vwid_postnump_token}
}

%  Should I do this? ...

\@ifundefined{newcolumntype}{}{
 \@ifundefined{NC@rewrite@V}{
 \newcolumntype{V}[1]{
   >{\begin{varwidth}[t]{#1}\narrowragged\cs_set_eq:NN\\\tabularnewline}
   l
   <{\@finalstrut\@arstrutbox\end{varwidth}}}
 }{}
}

