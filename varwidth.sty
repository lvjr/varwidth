%%% Copyright : 2003-2004, 2009 (c) Donald Arseneau <asnd@triumf.ca>
%%% Copyright : 2024 (c) Jianrui Lyu <tolvjr@163.com>
%%% License   : The LaTeX Project Public License 1.3c

\NeedsTeXFormat{LaTeX2e}[2018-04-01]
\providecommand\DeclareRelease[3]{}
\providecommand\DeclareCurrentRelease[2]{}
\DeclareRelease{v2009}{2003-01-01}{varwidth-2009.sty}
\DeclareCurrentRelease{}{2024-01-01}

\ProvidesExplPackage{varwidth}{2024-12-03}{2024A}{Variable-width minipages}

\cs_new_protected:Npn \narrowragged {
  \rightskip \z@ plus .25\hsize
  \@rightskip \rightskip
  \parfillskip \z@ plus .15\hsize
  \sloppy
}

\box_new:N \l__vwid_box
\box_new:N \l__vwid_temp_box
\box_new:N \l__vwid_last_box
\box_new:N \l__vwid_zero_box

% The varwidth environment is based on minipage, and takes the same
% parameters, but the specified width is only a limit -- a narrower
% natural width may be used.  \varwidth uses \minipage.

\cs_new_protected_nopar:Npn \varwidth {
  \cs_set_eq:NN \@minipagerestore \__vwid_setup
  \minipage
}

% Many things may appear on vertical lists that can't be re-processed,
% so they have to be modified. 

\cs_new_protected_nopar:Npn \__vwid_setup {
  % several things can't appear in vertical mode, so they may get 
  % a \vbox wrapped around them.
  \cs_set_eq:NN \@bsphack \__vwid_bsphack % \label and others
  \cs_set_eq:NN \mark \@gobble % Marks disappear in minipages anyway
  \cs_set_eq:NN \special \__vwid_special % \color and others
  \cs_set_eq:NN \pdfliteral \__vwid_pdfliteral % \color and others
  \cs_set_eq:NN \addtocontents \__vwid_addtocontents % \addcontentsline
  % Shifted boxes (\parshape,\hangindent) will have their shifts
  % indicated in a separate box.
  \cs_set_eq:NN \@hangfrom \__vwid_hangfrom % hanging indents
  \cs_set_eq:NN \list \__vwid_list
  \cs_set_eq:NN \endtrivlist \__vwid_endtrivlist
  \postdisplaypenalty \c__vwid_posteqp_token
  \predisplaypenalty \c__vwid_preeqp_token
  \cs_set_nopar:Npn \@eqnnum {
    \aftergroup \__vwid_afterva \__vwid_saved_@eqnnum
  }
  \dim_gzero:N \g__vwid_roff_dim
  \dim_gzero:N \g__vwid_loff_dim
  % Begin an inner minipage-like vertical box (in \l__vwid_temp_box)
  \cs_set_eq:NN \@minipagerestore \__vwid_saved_@minipagerestore
  \@minipagerestore
  \setbox \l__vwid_temp_box \vbox\bgroup\begingroup
  % Flag the top of the list
  \penalty \c__vwid_toppen_token
}

\cs_new_eq:NN \__vwid_saved_@minipagerestore \@minipagerestore
\dim_new:N \l__vwid_temp_dim
\dim_new:N \g__vwid_width_dim

%  At end of varwidth environment.
\cs_new_protected_nopar:Npn \endvarwidth {
   \par
   \@@par
   \unskip
   % Handle minipage-style notes.
   \box_if_empty:NF \@mpfootins {
     \vskip \skip\@mpfootins
     \normalcolor
     \__vwid_wrap
     \footnoterule
     \vbox_unpack_drop:N \@mpfootins
   }
   \unskip
   \@minipagefalse
   \endgroup\egroup % got my \l__vwid_temp_box
   %{\showoutput\showbox\l__vwid_temp_box}%
   % in a discarded box, sift through list measuring max width.
   \begingroup
   \vbox_set:Nn \l__vwid_zero_box {
%\message{-------------------------------------------------------------}%
%\message{First pass; hsize=\the\hsize...  }%{\tracingall\showlists}%%
     \vbox_unpack:N \l__vwid_temp_box
     \dim_set:Nn \l__vwid_temp_dim { -\c_max_dim }
     \cs_set_eq:NN \__vwid_resetb \__vwid_measure
     \cs_set_eq:NN \__vwid_append \relax
     \int_zero:N \l__vwid_sift_deathcycles_int
     \__vwid_sift
     \dim_gset_eq:NN \g__vwid_width_dim \l__vwid_temp_dim
   }
   \endgroup
   % Done measuring.  Now empty \l__vwid_temp_box onto current vertical list
   % which is the contents of a minipage environment
%\message{Got natural width \g__vwid_width_dim (compare \hsize) }%
   \vbox_unpack_drop:N \l__vwid_temp_box
   % Choose the natural width or the declared width, whichever is smaller.
   \dim_compare:nNnT { \g__vwid_width_dim } < { \hsize } {
     \dim_set_eq:NN \hsize \g__vwid_width_dim
   }
   % Go through the vertical list reboxing and moving everything into
   % \l__vwid_box; then spill \l__vwid_box.  If the natural width is narrower,
   \vbox_set:Nn \l__vwid_box {}
   \int_zero:N \l__vwid_sift_deathcycles_int
%\message{----------------------------------------------------------------}%
%\message{Second pass; hsize=\the\hsize...  }%{\tracingall\showlists}%
   \__vwid_sift
%\message{After sifting:}%
%{\showoutput\showbox\l__vwid_box}%
   \vbox_unpack_drop:N \l__vwid_box
   % end the minipage environment
   \endminipage
}

%
% Here are definitions for sifting through the vertical list, either
% measuring things or reboxing them.  
%
% Penalties used as signals to the vertical-list processor:

\mathchardef \c__vwid_posteqp_token  17321 % Penalty below equations
\mathchardef \c__vwid_preeqp_token   17322 % Penalty above equations
\mathchardef \c__vwid_postnump_token 17323 % Penalty below numbered equations
\mathchardef \c__vwid_toppen_token   17324 % Penalty marking top of vertical list
\mathchardef \c__vwid_offsets_token  17325 % Penalty below special h-offsets box
\mathchardef \c__vwid_postw_token    17326 % Penalty below a \vbox-wrapped object

\int_new:N \l__vwid_sift_deathcycles_int

\skip_new:N \l__vwid_last_skip
\dim_new:N \l__vwid_last_dim
\int_new:N \l__vwid_last_penalty_int

\cs_new_protected_nopar:Npn \__vwid_sift {
  \skip_set_eq:NN \l__vwid_last_skip \lastskip
  \unskip
  % the following line is a patch from latex firstaid (not just unskip)
  \dim_compare:nNnT { \lastskip } = { \c_zero_dim } { \unskip }
  \dim_set_eq:NN \l__vwid_last_dim \lastkern
  \unkern
  \int_set_eq:NN \l__vwid_last_penalty_int \lastpenalty
  \unpenalty
  \box_set_to_last:N \l__vwid_last_box
%{\showoutput\showbox\l__vwid_last_box}%
  \box_if_empty:NTF \l__vwid_last_box
    { \int_incr:N \l__vwid_sift_deathcycles_int }
    { \int_zero:N \l__vwid_sift_deathcycles_int }
  \int_compare:nNnT { \l__vwid_sift_deathcycles_int } > { 33 } {
    \cs_set_eq:NN \__vwid_sift \relax
    \PackageWarning { varwidth } { Failed ~ to ~ reprocess ~ entire ~ contents }
  }
%\message{\the\l__vwid_sift_deathcycles_int: skip \the\l__vwid_last_skip;
%         kern \the\l__vwid_last_dim; penalty \the\l__vwid_last_penalty_int. }%
%\ifhbox\l__vwid_last_box\setbox99\hbox to0pt{\hbox_unpack:N\l__vwid_last_box}\fi  % = message
  \int_compare:nNnT { \l__vwid_last_penalty_int } = { \c__vwid_preeqp_token } {
    \bool_set_false:N \l__vwid_eqmode_bool
  }
%\ifnum\l__vwid_last_penalty_int=\c__vwid_preeqp_token \message{End equation mode. }\fi
  \int_compare:nNnT { \l__vwid_last_penalty_int } = { \c__vwid_posteqp_token } {
    \bool_set_true:N \l__vwid_eqmode_bool
  }
%\ifnum\l__vwid_last_penalty_int=\c__vwid_posteqp_token\message{Begin equation mode. }\fi
%\bool_if:NT \l__vwid_eqmode_bool {{\showoutput\showbox\l__vwid_last_box}}
  \int_compare:nNnTF { \l__vwid_last_penalty_int } = { \c__vwid_toppen_token } { % finished
    \cs_set_eq:NN \__vwid_sift \relax
  }{
    \int_compare:nNnTF { \l__vwid_last_penalty_int } = { \c__vwid_offsets_token } {
      \__vwid_setoffsets
    }{
      \int_compare:nNnF { \l__vwid_last_penalty_int } = { \c__vwid_postw_token } {
        \__vwid_resetb % reset \l__vwid_last_box or measure it
      }
      \__vwid_append
    }
  }
  \__vwid_sift
}

\cs_new_protected_nopar:Npn \__vwid_setoffsets {
  \hbox_set:Nn \l__vwid_last_box {
    \hbox_unpack_drop:N \l__vwid_last_box
    \dim_gset_eq:NN \g__vwid_roff_dim \lastkern
    \unkern
    \dim_gset_eq:NN \g__vwid_loff_dim \lastkern
    \unkern
  }
%\message{Set offsets to \the\g__vwid_loff_dim,  \the\g__vwid_roff_dim. }%
}

% Append contents of \l__vwid_last_box and glue to \l__vwid_box
\cs_new_protected_nopar:Npn \__vwid_append {
  \vbox_set:Nn \l__vwid_box {
    \vbox_unpack_drop:N \l__vwid_last_box
    \dim_compare:nNnF { \l__vwid_last_dim } = { \c_zero_dim } { \kern \l__vwid_last_dim }
    \vskip \l__vwid_last_skip
    \vbox_unpack_drop:N \l__vwid_box
  }%{\tracingall\showbox\l__vwid_box}
}

%  reset \l__vwid_last_box to \hsize, applying shifts, and wrap in vbox
%  Don't worry about numbered equations because we won't get
%  here if there are any.
\cs_new_protected_nopar:Npn \__vwid_resetb {
  \vbox_set:Nn \l__vwid_last_box {
    \box_if_empty:NF \l__vwid_last_box {
       \box_if_vertical:NTF \l__vwid_last_box {
         \box_use:N \l__vwid_last_box
       }{ % \hbox
         \dim_set:Nn \l__vwid_temp_dim {
           \hsize - \g__vwid_roff_dim - \g__vwid_loff_dim - 1pt
         }
%\message{Test if \the\wd\l__vwid_last_box > \the\l__vwid_temp_dim, }%
         \dim_compare:nNnTF { \wd\l__vwid_last_box } > { \l__vwid_temp_dim }
         { % full-width line; rebox it
%\message{An ordinary line or alignment. (\the\wd\l__vwid_last_box > \the\l__vwid_temp_dim) }%
            \hbox to\hsize {
              \kern \g__vwid_loff_dim
              \hbox_unpack_drop:N \l__vwid_last_box
              \kern \g__vwid_roff_dim
            }
         }{ % an equation or direct \hbox
           \bool_if:NTF \l__vwid_eqmode_bool
           { % re-center unnumbered equations
%\message{A centered equation hsize=\the\hsize. }%
              \hbox to\hsize {
                \hskip \g__vwid_loff_dim plus 1fil
                \hbox_unpack_drop:N \l__vwid_last_box
                \hskip \g__vwid_roff_dim plus 1fil
              }
           }{ % plain narrow \hbox; leave it as-is
%\message{Plain narrow box}%
              \box_use:N \l__vwid_last_box
           }
         }
       }
    }
  }
}


% Measure a line (in \l__vwid_last_box) and keep a running tally of the
% widest natural width in \l__vwid_temp_dim

\cs_new_protected_nopar:Npn \__vwid_measure {
  \box_if_empty:NF \l__vwid_last_box {
    % numbered equations not part of alignments can't be reset,
    % so force retention of full width.
    \int_compare:nNnT { \l__vwid_last_penalty_int } = { \c__vwid_postnump_token } {
      \dim_compare:nNnT { \wd\l__vwid_last_box } < { \linewidth } {
        \dim_compare:nNnT { \l__vwid_temp_dim } < { \linewidth } {
          \dim_set_eq:NN \l__vwid_temp_dim \linewidth
        }
      }
    }
    \box_if_horizontal:NT \l__vwid_last_box {
      \hbox_set:Nn \l__vwid_last_box {
        \kern \g__vwid_loff_dim
        \hbox_unpack_drop:N \l__vwid_last_box
        \kern \g__vwid_roff_dim
      }
    }
    \dim_compare:nNnT { \wd\l__vwid_last_box } > { \l__vwid_temp_dim } {
      \dim_set:Nn \l__vwid_temp_dim { \wd\l__vwid_last_box }
    }
  }
}

\dim_new:N \g__vwid_loff_dim
\dim_new:N \g__vwid_roff_dim

\cs_new_eq:NN \__vwid_saved_@bsphack \@bsphack
\cs_new_eq:NN \__vwid_saved_@esphack \@esphack
\cs_new_eq:NN \__vwid_saved_@Esphack \@Esphack

\cs_new_protected_nopar:Npn \__vwid_bsphack {
  \__vwid_saved_@bsphack
  \cs_if_eq:NNTF \__vwid_wrap \use:n {
    \bgroup
  }{
    \mode_if_vertical:T {
      \setbox \l__vwid_box \vbox\bgroup \vbox\bgroup
      \cs_set_eq:NN \__vwid_wrap \use:n
      \cs_set_nopar:Npn \@esphack {
        \__vwid_esphack \__vwid_saved_@esphack
      }
      \cs_set_nopar:Npn \@Esphack {
        \__vwid_esphack \__vwid_saved_@Esphack
      }
    }
  }
}

\cs_new_protected_nopar:Npn \__vwid_esphack {
  \egroup
  \cs_if_eq:NNF \__vwid_wrap \use:n {
    \egroup % end outer box
    \vbox_unpack_drop:N \l__vwid_box % put inner box on list without lineskip
    \penalty \c__vwid_postw_token
  }
}

% \vbox Wrapper for misc vlist items
\cs_new_protected:Npn \__vwid_wrap {
  \relax
  \mode_if_vertical:TF { \__vwid_do_wrap }{ \use:n }
}
\cs_new_protected:Npn \__vwid_do_wrap #1 {
  \vbox_set:Nn \l__vwid_box {
    \vbox {
      \cs_set_eq:NN \__vwid_wrap \use:n
      #1
    }
    \penalty \c__vwid_postw_token
  }
  \vbox_unpack_drop:N \l__vwid_box
}

\cs_new_eq:NN \__vwid_saved_special       \special
\cs_new_eq:NN \__vwid_saved_pdfliteral    \pdfliteral
\cs_new_eq:NN \__vwid_saved_addtocontents \addtocontents
\cs_new_eq:NN \__vwid_saved_list          \list
\cs_new_eq:NN \__vwid_saved_endtrivlist   \endtrivlist
\cs_new_eq:NN \__vwid_saved_@eqnnum       \@eqnnum

\cs_new_protected:Npn \__vwid_special #1 {
  \__vwid_wrap { \__vwid_saved_special { #1 } }
}

\cs_new_protected:Npn \__vwid_pdfliteral #1 {
  \__vwid_wrap { \__vwid_saved_pdfliteral { #1 } }
}

\cs_new_protected:Npn \__vwid_addtocontents #1 #2 {
  \__vwid_wrap { \__vwid_saved_addtocontents { #1 } { #2 } }
}

\cs_new_protected:Npn \__vwid_hangfrom #1 {
  \par
  \hbox_set:Nn \l__vwid_temp_box { { #1 } }
  \vbox_set:Nn \l__vwid_box {
    \hbox {
      \kern \c_zero_dim
      \kern \c_zero_dim
    }
    \penalty \c__vwid_offsets_token
  }
  \vbox_unpack_drop:N \l__vwid_box
  \cs_set_nopar:Npn \par {
    \relax
    \mode_if_horizontal:T { \unskip }
    \vadjust {
      \hbox {
        \kern \hangindent
        \kern \c_zero_dim
      }
      \penalty \c__vwid_offsets_token
    }
    \@restorepar
    \par
  }
  \hangindent \wd\l__vwid_temp_box
  \noindent
  \box_use:N \l__vwid_temp_box
}

\cs_new_protected_nopar:Npn \__vwid_list {
  \__vwid_setlist \__vwid_saved_list
}

\cs_new_protected_nopar:Npn \__vwid_endtrivlist {
  \__vwid_setlist \__vwid_saved_endtrivlist
}

\cs_new_protected_nopar:Npn \__vwid_setlist {
  \relax
  \mode_if_horizontal:T { \unskip \vadjust }
  {
    \vbox_set:Nn \l__vwid_box {
      \hbox {
        \dim_sub:Nn \hsize { \linewidth + \@totalleftmargin }
        \kern \@totalleftmargin
        \kern \hsize
      }
      \penalty \c__vwid_offsets_token
    }
    \vbox_unpack_drop:N \l__vwid_box
  }
}

\bool_new:N \l__vwid_eqmode_bool

\cs_new_protected_nopar:Npn \__vwid_afterva {
  \vadjust { \penalty \c__vwid_postnump_token }
}

%  Should I do this? ...

\cs_if_exist:cT { newcolumntype } {
  \cs_if_exist:cF { NC@rewrite@V } {
    \newcolumntype {V} [1] {
      >{\begin{varwidth}[t]{#1}\narrowragged\cs_set_eq:NN\\\tabularnewline}
      l
      <{\@finalstrut\@arstrutbox\end{varwidth}}
    }
  }
}

